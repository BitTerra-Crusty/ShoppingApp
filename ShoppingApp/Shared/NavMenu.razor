@using ShoppingApp.Services
@using ShoppingApp.Pages
@inject CartServices CartService
@inject CategoryServices CategoryService
@inject ProductServices ProductService

<header class="">
    <div class="logo navbar-brand">
        <a href=""> <img src="/images/icon.png" height="30" alt="logo" /> FOODIES</a>
    </div>
    <nav class="@NavMenuCssClass">
        <div>
            <ul class="col-sm-12">
                <li>
                    <div class="input-group search">
                        <span>
                            <i class="oi oi-magnifying-glass"></i>
                        </span>
                        <input class="form-control" id="myInput" type="text" @bind="ProductName" @bind:event="oninput" placeholder="Search..">
                    </div>
                </li>
                <li>
                    <a class="nav-link" href="Category" Match="NavLinkMatch.All">
                        <span aria-hidden="true" class="text-secondary"></span> Categories
                    </a>
                </li>

                <li>
                    <a class="nav-link" href="Cart" Match="NavLinkMatch.All">
                        <span class="oi oi-cart" aria-hidden="true"></span>&nbsp;&nbsp; <span class="badge-outline-success">  @cartCount</span>
                    </a>
                </li>
                <li>
                    <a class="nav-link user disabled" href="#" Match="NavLinkMatch.All">
                        <span class="oi oi-person" aria-hidden="true"></span>&nbsp;&nbsp;User
                    </a>
                </li>

            </ul>
        </div>
    </nav>
    <div class="navbar-toggler" @onclick="ToggleNavMenu">
        <a href="Cart">
            <span class="oi oi-cart text-success" aria-hidden="true"></span>&nbsp;&nbsp; <span class="badge-outline-success text-success mr-4">  @cartCount</span>
        </a>
        <span class="oi oi-menu">
        </span>
    </div>
</header>
@code {
    private string _ProductName;
    public string ProductName
    {
        set
        {   this._ProductName = value;
            FilterByProductName();
        }
        get
        {
            return _ProductName;
        }
    }

    [Parameter]
    public EventCallback<string> OnfilterByproduct { get; set; }

    public void FilterByProductName()
    {
        if (ProductName == null || ProductName.Trim() == "")
        {
            ProductService.FilteredProducts.Clear();
        }
        else
        {
            ProductService.FilteredProducts.Clear();

            foreach (var product in ProductService.Products)
            {
                if (product.Name.ToLower().Contains(ProductName.ToLower()))
                {
                    ProductService.FilteredProducts.Add(product);
                }
            }

        }
        ProductService.FilteredProductsCopy.AddRange(ProductService.FilteredProducts);
        OnfilterByproduct.InvokeAsync(ProductName);
    }

    private bool collapseNavMenu = false;

    private string NavMenuCssClass => collapseNavMenu ? "active" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [Parameter]
    public int cartCount { get; set; }
}
